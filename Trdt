public class PdfAnnotationProcessor {

    public static <T> T extractFromPdfLines(List<String> lines, Class<T> clazz) throws Exception {
        T instance = clazz.getDeclaredConstructor().newInstance();

        for (Field field : clazz.getDeclaredFields()) {
            PdfExtract annotation = field.getAnnotation(PdfExtract.class);
            if (annotation == null) continue;

            Pattern pattern = Pattern.compile(annotation.regex());

            for (int i = annotation.startLine(); i <= Math.min(annotation.endLine(), lines.size() - 1); i++) {
                String line = lines.get(i);

                Matcher matcher = pattern.matcher(line);
                if (matcher.find() && matcher.groupCount() >= annotation.group()) {
                    String extracted = matcher.group(annotation.group()).replace(",", "").trim();

                    field.setAccessible(true);
                    if (field.getType().equals(double.class)) {
                        field.set(instance, Double.parseDouble(extracted));
                    } else if (field.getType().equals(int.class)) {
                        field.set(instance, Integer.parseInt(extracted));
                    } else {
                        field.set(instance, extracted); // fallback
                    }
                    break;
                }
            }
        }

        return instance;
    }
}

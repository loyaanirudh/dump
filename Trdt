import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.apache.pdfbox.text.TextPosition;
import java.io.File;
import java.io.IOException;
import java.util.*;

public class DynamicBoxExtractor extends PDFTextStripper {
    
    private final Map<String, List<TextPosition>> textPositions = new LinkedHashMap<>();

    public DynamicBoxExtractor() throws IOException {
        super.setSortByPosition(true);
    }

    @Override
    protected void writeString(String string, List<TextPosition> textPositions) {
        this.textPositions.put(string, textPositions);
    }

    public static void extractData(String filePath) {
        try (PDDocument document = PDDocument.load(new File(filePath))) {
            DynamicBoxExtractor extractor = new DynamicBoxExtractor();
            extractor.getText(document);

            System.out.println("\n======= Extracted Box Data =======");

            // Define labels to search dynamically
            List<String> labels = List.of(
                "LEVEL 1 REQUIREMENT", "LEVEL 2 REQUIREMENT", "LEVEL 3 REQUIREMENT",
                "Currency", "Total Deficiency in USD", "Cash Call in USD"
            );

            for (String label : labels) {
                String value = extractor.findTextNear(label);
                System.out.println(label + ": " + value);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private String findTextNear(String label) {
        if (!textPositions.containsKey(label)) {
            return "Not Found";
        }

        // Get the position of the label
        List<TextPosition> positions = textPositions.get(label);
        if (positions.isEmpty()) return "Not Found";

        float labelY = positions.get(0).getYDirAdj();  // Y-coordinate of label
        float labelX = positions.get(0).getXDirAdj();  // X-coordinate of label

        // Find text closest to the label
        String closestText = "Not Found";
        float minDistance = Float.MAX_VALUE;

        for (Map.Entry<String, List<TextPosition>> entry : textPositions.entrySet()) {
            String text = entry.getKey();
            List<TextPosition> posList = entry.getValue();

            if (!text.equals(label) && !text.isEmpty()) {
                float textY = posList.get(0).getYDirAdj();
                float textX = posList.get(0).getXDirAdj();

                // Check if text is directly beside or below the label
                float distance = Math.abs(textY - labelY);
                if (distance < minDistance && textX > labelX) {
                    minDistance = distance;
                    closestText = text;
                }
            }
        }
        return closestText;
    }

    public static void main(String[] args) {
        extractData("path/to/your.pdf");
    }
}

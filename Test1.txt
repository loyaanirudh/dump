import gitlab

# GitLab connection settings
GITLAB_URL = 'https://gitlab.com'
PRIVATE_TOKEN = 'your_private_token'
GROUP_ID = 'your_group_id_or_path'

# Webhook URLs and data
WEBHOOK_URLS = [
    'https://example.com/webhook1',
    'https://example.com/webhook2',
    # Add other webhook URLs as needed
]
WEBHOOK_DATA = {
    'push_events': True,
    'merge_requests_events': True,
    'enable_ssl_verification': True,
    # Add other webhook settings as needed
}

# List of subgroups to be ignored (by ID or path)
IGNORED_SUBGROUPS = [
    'ignored_subgroup_id_or_path1',
    'ignored_subgroup_id_or_path2',
    # Add other subgroup IDs or paths to be ignored
]

def update_project_settings(project):
    """
    Update the settings of a given project.
    """
    try:
        # Example: Update the visibility level to private
        project.visibility = 'private'
        
        # Example: Enable merge requests
        project.merge_requests_enabled = True
        
        # Save changes
        project.save()
        print(f"Updated project {project.name}")
    except Exception as e:
        print(f"Failed to update project {project.name}: {e}")

def get_all_projects(group, ignored_subgroups):
    """
    Recursively fetch all projects in the group and its subgroups,
    excluding those in the ignored subgroups.
    """
    projects = []
    
    # Check if the current group is not in the ignored subgroups list
    if group.id not in ignored_subgroups and group.full_path not in ignored_subgroups:
        projects.extend(group.projects.list(all=True))

    subgroups = group.subgroups.list(all=True)
    for subgroup in subgroups:
        if subgroup.id not in ignored_subgroups and subgroup.full_path not in ignored_subgroups:
            subgroup = gl.groups.get(subgroup.id)
            projects.extend(get_all_projects(subgroup, ignored_subgroups))
            
    return projects

def manage_project_webhooks(project, webhook_urls, webhook_data):
    """
    Check if each webhook exists in the project. If it does, update it. Otherwise, create it.
    If there are duplicate webhooks with the same URL, update one and delete the others.
    """
    try:
        # Get the list of webhooks for the project
        existing_webhooks = project.hooks.list()
        
        for url in webhook_urls:
            # Find all webhooks with the specified URL
            webhooks_with_url = [hook for hook in existing_webhooks if hook.url == url]
            
            if webhooks_with_url:
                # Update the first webhook found with the URL
                webhook_to_update = webhooks_with_url[0]
                webhook_to_update.data.update(webhook_data)
                webhook_to_update.save()
                print(f"Updated webhook for project {project.name} with URL {url}")
                
                # Delete any additional webhooks with the same URL
                for webhook in webhooks_with_url[1:]:
                    webhook.delete()
                    print(f"Deleted duplicate webhook for project {project.name} with URL {url}")
            else:
                # Create a new webhook
                project.hooks.create({'url': url, **webhook_data})
                print(f"Created new webhook for project {project.name} with URL {url}")
    except Exception as e:
        print(f"Failed to manage webhooks for project {project.name}: {e}")

def main():
    # Connect to GitLab
    global gl
    gl = gitlab.Gitlab(GITLAB_URL, private_token=PRIVATE_TOKEN)

    # Get the group
    group = gl.groups.get(GROUP_ID)

    # Get all projects in the group and its subgroups
    projects = get_all_projects(group, IGNORED_SUBGROUPS)

    # Update settings and manage webhooks for each project
    for project in projects:
        # Get the full project information
        project = gl.projects.get(project.id)
        
        # Update project settings
        update_project_settings(project)
        
        # Manage project webhooks
        manage_project_webhooks(project, WEBHOOK_URLS, WEBHOOK_DATA)

if __name__ == "__main__":
    main()

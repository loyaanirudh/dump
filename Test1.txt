import gitlab

# GitLab connection settings
GITLAB_URL = 'https://gitlab.com'
PRIVATE_TOKEN = 'your_private_token'
GROUP_ID = 'your_group_id_or_path'

# Webhook URLs and data
WEBHOOK_URLS = [
    'https://example.com/webhook1',
    'https://example.com/webhook2',
    # Add other webhook URLs as needed
]
WEBHOOK_DATA = {
    'push_events': True,
    'merge_requests_events': True,
    'enable_ssl_verification': True,
    # Add other webhook settings as needed
}

def update_project_settings(project):
    """
    Update the settings of a given project.
    """
    try:
        # Example: Update the visibility level to private
        project.visibility = 'private'
        
        # Example: Enable merge requests
        project.merge_requests_enabled = True
        
        # Save changes
        project.save()
        print(f"Updated project {project.name}")
    except Exception as e:
        print(f"Failed to update project {project.name}: {e}")

def get_all_projects(group):
    """
    Recursively fetch all projects in the group and its subgroups.
    """
    projects = group.projects.list(all=True)
    for subgroup in group.subgroups.list(all=True):
        subgroup = gl.groups.get(subgroup.id)
        projects.extend(get_all_projects(subgroup))
    return projects

def manage_project_webhooks(project, webhook_urls, webhook_data):
    """
    Check if each webhook exists in the project. If it does, update it. Otherwise, create it.
    """
    try:
        # Get the list of webhooks for the project
        existing_webhooks = project.hooks.list()
        
        for url in webhook_urls:
            # Check if the webhook already exists
            existing_webhook = next((hook for hook in existing_webhooks if hook.url == url), None)
            
            if existing_webhook:
                # Update the existing webhook
                existing_webhook.data.update(webhook_data)
                existing_webhook.save()
                print(f"Updated webhook for project {project.name} with URL {url}")
            else:
                # Create a new webhook
                project.hooks.create({'url': url, **webhook_data})
                print(f"Created new webhook for project {project.name} with URL {url}")
    except Exception as e:
        print(f"Failed to manage webhooks for project {project.name}: {e}")

def main():
    # Connect to GitLab
    gl = gitlab.Gitlab(GITLAB_URL, private_token=PRIVATE_TOKEN)

    # Get the group
    group = gl.groups.get(GROUP_ID)

    # Get all projects in the group and its subgroups
    projects = get_all_projects(group)

    # Update settings and manage webhooks for each project
    for project in projects:
        # Get the full project information
        project = gl.projects.get(project.id)
        
        # Update project settings
        update_project_settings(project)
        
        # Manage project webhooks
        manage_project_webhooks(project, WEBHOOK_URLS, WEBHOOK_DATA)

if __name__ == "__main__":
    main()

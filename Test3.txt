import jira
import gitlab
import re

# Configuration
JIRA_SERVER = 'https://your-jira-instance.atlassian.net'
JIRA_USER = 'your-jira-email'
JIRA_API_TOKEN = 'your-jira-api-token'

GITLAB_SERVER = 'https://gitlab.com'
GITLAB_PRIVATE_TOKEN = 'your-gitlab-private-token'
GITLAB_PARENT_GROUP_ID = 12345678  # Replace with your GitLab parent group ID

# Initialize Jira and GitLab clients
jira_client = jira.JIRA(server=JIRA_SERVER, basic_auth=(JIRA_USER, JIRA_API_TOKEN))
gl = gitlab.Gitlab(GITLAB_SERVER, private_token=GITLAB_PRIVATE_TOKEN)

def get_jira_fix_version(issue_key):
    try:
        issue = jira_client.issue(issue_key)
        fix_versions = issue.fields.fixVersions
        if fix_versions:
            return fix_versions[0].name
        return None
    except jira.JIRAError as e:
        print(f"Error fetching Jira issue {issue_key}: {e}")
        return None

def get_projects_from_group(group_id):
    try:
        group = gl.groups.get(group_id)
        projects = group.projects.list(all=True)
        return [project for project in projects]
    except gitlab.GitlabGetError as e:
        print(f"Error fetching projects from GitLab group: {e}")
        return []

def get_gitlab_branches(project_id):
    try:
        project = gl.projects.get(project_id)
        branches = project.branches.list()
        return [branch.name for branch in branches]
    except gitlab.GitlabGetError as e:
        print(f"Error fetching GitLab branches: {e}")
        return []

def extract_jira_keys_from_branches(branch_names):
    jira_keys = []
    pattern = re.compile(r'\bMARGINPRO-\d+\b')  # Pattern for Jira issue keys starting with "MARGINPRO"
    for name in branch_names:
        match = pattern.search(name)
        if match:
            jira_keys.append(match.group())
    return jira_keys

def get_or_create_gitlab_milestone(project, milestone_title):
    milestones = project.milestones.list()
    for milestone in milestones:
        if milestone.title == milestone_title:
            return milestone
    # Create milestone if it does not exist
    return project.milestones.create({'title': milestone_title})

def tag_merge_requests_with_milestone(project_id, milestone_title):
    try:
        project = gl.projects.get(project_id)
        milestone = get_or_create_gitlab_milestone(project, milestone_title)

        merge_requests = project.mergerequests.list(state='opened', all=True)
        for mr in merge_requests:
            if milestone_title not in [m.title for m in mr.milestones.list()]:
                mr.milestones.create({'title': milestone_title})
                print(f"Tagged merge request {mr.id} with milestone: {milestone_title}")

    except gitlab.GitlabGetError as e:
        print(f"Error tagging merge requests in project {project_id}: {e}")

def main():
    projects = get_projects_from_group(GITLAB_PARENT_GROUP_ID)

    for project in projects:
        project_id = project.id
        branch_names = get_gitlab_branches(project_id)
        jira_keys = extract_jira_keys_from_branches(branch_names)

        for jira_key in jira_keys:
            fix_version = get_jira_fix_version(jira_key)
            if fix_version:
                tag_merge_requests_with_milestone(project_id, fix_version)
            else:
                print(f"No fix version found in Jira issue: {jira_key}")

if __name__ == "__main__":
    main()

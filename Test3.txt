import jira
import gitlab
import re

# Configuration
JIRA_SERVER = 'https://your-jira-instance.atlassian.net'
JIRA_USER = 'your-jira-email'
JIRA_API_TOKEN = 'your-jira-api-token'

GITLAB_SERVER = 'https://gitlab.com'
GITLAB_PRIVATE_TOKEN = 'your-gitlab-private-token'
GITLAB_PROJECT_ID = 12345678  # Replace with your GitLab project ID

# Initialize Jira and GitLab clients
jira_client = jira.JIRA(server=JIRA_SERVER, basic_auth=(JIRA_USER, JIRA_API_TOKEN))
gl = gitlab.Gitlab(GITLAB_SERVER, private_token=GITLAB_PRIVATE_TOKEN)

def get_jira_fix_version(issue_key):
    try:
        issue = jira_client.issue(issue_key)
        fix_versions = issue.fields.fixVersions
        if fix_versions:
            return fix_versions[0].name
        return None
    except jira.JIRAError as e:
        print(f"Error fetching Jira issue {issue_key}: {e}")
        return None

def get_gitlab_branches(project_id):
    try:
        project = gl.projects.get(project_id)
        branches = project.branches.list()
        return [branch.name for branch in branches]
    except gitlab.GitlabGetError as e:
        print(f"Error fetching GitLab branches: {e}")
        return []

def extract_jira_keys_from_branches(branch_names):
    jira_keys = []
    pattern = re.compile(r'\bMINPRO-\d+\b')  # Pattern for Jira issue keys starting with 
    for name in branch_names:
        match = pattern.search(name)
        if match:
            jira_keys.append(match.group())
    return jira_keys

def update_gitlab_fix_version_by_branch(project_id, branch_name, fix_version):
    try:
        project = gl.projects.get(project_id)
        issues = project.issues.list()
        for issue in issues:
            if branch_name in issue.references['full']:
                issue.description += f"\n\nFix Version: {fix_version}"
                issue.save()
                print(f"Updated GitLab issue with fix version: {fix_version}")
                return
        print(f"No GitLab issue found for branch: {branch_name}")
    except gitlab.GitlabGetError as e:
        print(f"Error updating GitLab issue: {e}")

def main():
    branch_names = get_gitlab_branches(GITLAB_PROJECT_ID)
    jira_keys = extract_jira_keys_from_branches(branch_names)

    for jira_key in jira_keys:
        fix_version = get_jira_fix_version(jira_key)
        if fix_version:
            update_gitlab_fix_version_by_branch(GITLAB_PROJECT_ID, jira_key, fix_version)
        else:
            print(f"No fix version found in Jira issue: {jira_key}")

if __name__ == "__main__":
    main()
